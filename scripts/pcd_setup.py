#!/usr/bin/python3

import warnings  # To ignore FutureWarning from pandas

warnings.simplefilter(action='ignore', category=FutureWarning)
import pandas as pd

# Top lidar msg timestamps, all data is relative to the top lidar
timestamps = [
    "1731680320128386304",
    "1731680320228357120",
    "1731680320328339968",
    "1731680320428329216",
    "1731680320528308480",
    "1731680320628301824",
    "1731680320728293632",
    "1731680320828286976",
    "1731680320928278784",
    "1731680321028372992",
    "1731680321128357120",
    "1731680321228332288",
    "1731680321328310528",
    "1731680321428289280",
    "1731680321528275968",
    "1731680321628248064",
    "1731680321728214016",
    "1731680321828184576",
    "1731680321928154880",
    "1731680322028238848",
    "1731680322128217088",
    "1731680322228212224",
    "1731680322328201984",
    "1731680322428196352",
    "1731680322528177408",
    "1731680322628148736",
    "1731680322728127488",
    "1731680322828109056",
    "1731680322928116992",
    "1731680323028245248",
    "1731680323128248064",
    "1731680323228241920",
    "1731680323328217088",
    "1731680323428183552",
    "1731680323528147712",
    "1731680323628119296",
    "1731680323728099584",
    "1731680323828089856",
    "1731680323928083200",
    "1731680324028204800",
    "1731680324128220160",
    "1731680324228239616",
    "1731680324328261120",
    "1731680324428276224",
    "1731680324528288512",
    "1731680324628296192",
    "1731680324728296960",
    "1731680324828303872",
    "1731680324928300544",
    "1731680325028409088",
    "1731680325128409856",
    "1731680325228420352",
    "1731680325328435712",
    "1731680325428449536",
    "1731680325528463616",
    "1731680325628479744",
    "1731680325728489984",
    "1731680325828504064",
    "1731680325928508928",
    "1731680326028628224",
    "1731680326128622592",
    "1731680326228614144",
    "1731680326328590336",
    "1731680326428589568",
    "1731680326528594688",
    "1731680326628584192",
    "1731680326728579328",
    "1731680326828575488",
    "1731680326928573696",
    "1731680327028689920",
    "1731680327128706560",
    "1731680327228709120",
    "1731680327328713984",
    "1731680327428721664",
    "1731680327528712704",
    "1731680327628707584",
    "1731680327728691968",
    "1731680327828695552",
    "1731680327928686592",
    "1731680328028797952",
    "1731680328128787712",
    "1731680328228773120",
    "1731680328328756736",
    "1731680328428749824",
    "1731680328528748800",
    "1731680328628755712",
    "1731680328728757504",
    "1731680328828766208",
    "1731680328928774144",
    "1731680329028894976",
    "1731680329128911104",
    "1731680329228919040",
    "1731680329328920576",
    "1731680329428911360",
    "1731680329528901632",
    "1731680329628900864",
    "1731680329728910336",
    "1731680329828912384",
    "1731680329928913664",
    "1731680330029048064",
]

# Pointcloud sample dictionary structure
pcd_struct = {
    "pcd": {
        "url": "pcd_url",
        "type": "pcd",
    },
    "images": [],
    "ego_pose": {
        "position": {
            "x": 0,
            "y": 0,
            "z": 0,
        },
        "heading": {
            "qx": 0,
            "qy": 0,
            "qz": 0,
            "qw": 1,
        },
    },
    "default_z": "-1.78",  # Top lidar height from ground level
    "name": "test",
    "timestamp": 0,
}

# Load the lidar pcds
pcd_path = "/opt/ros_ws/output/Test_3D_3_lidar.txt"
columns = ['url']

# Read text file
pcd_file = pd.read_csv(
    pcd_path, delim_whitespace=True, header=None, names=columns
)

pcd_urls = pcd_file['url'].tolist()


def getSamplePCD(i):
    sample = pcd_struct
    sample["pcd"]["url"] = pcd_urls[i]
    return sample


def getTimestamp(i):
    # TODO: Add logic to get timestamp from somewhere. Lidar pointcloud?
    return timestamps[i]
